#include "binary_trees.h"

/**
 * max_val - gets the maximum value of nodes in a tree
 * @tree: the tree to check
 *
 * Return: returns the value of the maximum node
 */
int max_val(const binary_tree_t *tree)
{
	int left, right, value = 0;

	if (tree == NULL)
		return (0);

	left = max_val(tree->left);
	right = max_val(tree->right);

	if (left > right)
		value = left;
	else
		value = right;

	if (value < tree->n)
		value = tree->n;

	return (value);
}

/**
 * min_value - gets the minimum value of nodes in a tree
 * @tree: the tree to check
 *
 * Return: the value of the minimum node
 */
int min_val(const binary_tree_t *tree)
{
	int left, right, value = 0;

	/* return a very large number if NULL */
	if (tree == NULL)
		return (1000000000);

	left = min_val(tree->left);
	right = min_val(tree->right);

	if (left < right)
		value = left;
	else
		value = right;

	if (value > tree->n)
		value = tree->n;

	return (value);
}

/**
 * check_recursive - checks if the given tree is a valid bst
 * @tree: the tree to check
 *
 * Return: returns 1 on true, 0 otherwise
 */
int check_recursive(const binary_tree_t *tree)
{
	if (tree == NULL)
		return (1);

	/* max on the left is greater than current node */
	if (tree->left != NULL && max_val(tree->left) > tree->n)
		return (0);
	/* min on the right is less than current node */
	if (tree->right != NULL && min_val(tree->right) < tree->n)
		return (0);

	if (check_recursive(tree->left) == 0 ||
	    check_recursive(tree->right) == 0)
		return (0);

	return (1);
}

/**
 * binary_tree_is_bst - check if a binary tree is a valid binary search tree
 * @tree: the tree to check
 *
 * Return: returns 1 if it is valid, 0 otherwise
 */
int binary_tree_is_bst(const binary_tree_t *tree)
{
	int bst;

	if (tree == NULL)
		return (0);

	bst = check_recursive(tree);

	return (bst);
}
